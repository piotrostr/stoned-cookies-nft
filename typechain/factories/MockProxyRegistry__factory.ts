/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockProxyRegistry,
  MockProxyRegistryInterface,
} from "../MockProxyRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "proxies",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "address",
        name: "_proxyForAddress",
        type: "address",
      },
    ],
    name: "setProxy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6106e18061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063a9d4630c11610050578063a9d4630c14610094578063c4552791146100b0578063f2fde38b146100e057610067565b8063715018a61461006c5780638da5cb5b14610076575b600080fd5b6100746100fc565b005b61007e610184565b60405161008b9190610579565b60405180910390f35b6100ae60048036038101906100a991906104e4565b6101ad565b005b6100ca60048036038101906100c591906104b7565b6102ab565b6040516100d79190610579565b60405180910390f35b6100fa60048036038101906100f591906104b7565b6102de565b005b6101046103d6565b73ffffffffffffffffffffffffffffffffffffffff16610122610184565b73ffffffffffffffffffffffffffffffffffffffff1614610178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016f906105b4565b60405180910390fd5b61018260006103de565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101b56103d6565b73ffffffffffffffffffffffffffffffffffffffff166101d3610184565b73ffffffffffffffffffffffffffffffffffffffff1614610229576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610220906105b4565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102e66103d6565b73ffffffffffffffffffffffffffffffffffffffff16610304610184565b73ffffffffffffffffffffffffffffffffffffffff161461035a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610351906105b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c190610594565b60405180910390fd5b6103d3816103de565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506104b181610694565b92915050565b6000602082840312156104cd576104cc610617565b5b60006104db848285016104a2565b91505092915050565b600080604083850312156104fb576104fa610617565b5b6000610509858286016104a2565b925050602061051a858286016104a2565b9150509250929050565b61052d816105e5565b82525050565b60006105406026836105d4565b915061054b8261061c565b604082019050919050565b60006105636020836105d4565b915061056e8261066b565b602082019050919050565b600060208201905061058e6000830184610524565b92915050565b600060208201905081810360008301526105ad81610533565b9050919050565b600060208201905081810360008301526105cd81610556565b9050919050565b600082825260208201905092915050565b60006105f0826105f7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61069d816105e5565b81146106a857600080fd5b5056fea26469706673582212209e0bcc19ce9766cdec48907069ef056119bc96d227b20a01b06f34aed2bcc03764736f6c63430008070033";

type MockProxyRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockProxyRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockProxyRegistry__factory extends ContractFactory {
  constructor(...args: MockProxyRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockProxyRegistry";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockProxyRegistry> {
    return super.deploy(overrides || {}) as Promise<MockProxyRegistry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockProxyRegistry {
    return super.attach(address) as MockProxyRegistry;
  }
  connect(signer: Signer): MockProxyRegistry__factory {
    return super.connect(signer) as MockProxyRegistry__factory;
  }
  static readonly contractName: "MockProxyRegistry";
  public readonly contractName: "MockProxyRegistry";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockProxyRegistryInterface {
    return new utils.Interface(_abi) as MockProxyRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockProxyRegistry {
    return new Contract(address, _abi, signerOrProvider) as MockProxyRegistry;
  }
}
